#!/usr/bin/env ruby
# frozen_string_literal: true

puts 'Application starting...'
require_relative '../config/environment'

puts "* Environment: #{ENV.fetch('APP_ENV', nil)}"
puts "* Ruby version: #{RUBY_VERSION}"
puts '* Bot started'
puts 'Use Ctrl-C to stop'

TOKEN = '5679986265:AAEs1cUuPkcxZTHQdGhCRYh890wt8X6iK5A'
OBSERVER_IDS = [203_919_563, -1_001_302_618_953].freeze
require 'telegram/bot'
Telegram::Bot::Client.run(TOKEN) do |bot|
  # OBSERVER_IDS.each do |chat_id|
  #   bot.api.send_message(
  #     chat_id: chat_id,
  #     text: '–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...'
  #   )
  # end
  byebug
  bot.listen do |message|
    case message
    when Telegram::Bot::Types::ChatMemberUpdated
      # binding.pry
      # administrator - –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–∫ –∞–¥–º–∏–Ω–∞ –≥—Ä—É–ø–ø—ã
      # left - —É–¥–∞–ª–∏—Ç—å –∏–∑ –≥—Ä—É–ø–ø—ã
      # member - –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–∫ —á–ª–µ–Ω–∞ –≥—Ä—É–ø–ø—ã
      # kicked - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –≤ –≥—Ä—É–ø–ø–µ
      puts 'is Telegram::Bot::Types::ChatMemberUpdated'
      puts message.new_chat_member.status
      puts message.old_chat_member.status
    when Telegram::Bot::Types::Message
      duck = 'ü¶Ü'
      if message.text&.downcase == '–∫—Ä—è' || message.text == 'ü¶Ü'
        bot.api.send_message(chat_id: message.chat.id,
                             text: duck)
      end
      puts [message.chat.title, message.from.username, message.text].join(' | ')
      byebug
    else
      puts message.class
    end
    # bot.api.send_message(chat_id: message.chat.id, text: "Started by #{message.from.first_name} #{message.from.last_name}") if message.text == '/start'
  end
rescue SystemExit, Interrupt
  puts '- Stopped successfully'
  # OBSERVER_IDS.each do |chat_id|
  #   bot.api.send_message(
  #     chat_id: chat_id,
  #     text: '–ë–æ—Ç –æ–ø—É—â–µ–Ω...'
  #   )
  # end
end
